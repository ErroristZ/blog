<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on 很高兴与你相遇！</title>
		<link>http://52yaya.cn/posts/</link>
		<description>Recent content in Posts on 很高兴与你相遇！</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-hans</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 31 Aug 2022 23:40:14 +0800</lastBuildDate>
		<atom:link href="http://52yaya.cn/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>使用 CODING 自动化部署 PHP&#43;SWOOLE 框架 Hyperf 项目</title>
			<link>http://52yaya.cn/posts/coding/</link>
			<pubDate>Wed, 31 Aug 2022 23:40:14 +0800</pubDate>
			
			<guid>http://52yaya.cn/posts/coding/</guid>
			<description>创建基础项目  首先我们在右上角创建一个项目。  然后选全功能 DevOps 项目，创建好项目。  进入项目后点击右上角，创建一个代码仓库 安装 Hyperf, 或者直接去github拉取hyperf项目，此处不做示范  编写构建计划 首先检出分支，然后会根据分支下的 Dockerfile 生成镜像，然后推送镜像到 coding 的制品仓库。最后登录服务器拉取镜像进行部署。
创建构建计划  首先我们先创建一个构建计划  然后点击右上角，选择构造计划模板，我们这里选择自定义模板，按照文章最下面配置即可  选择文本编辑器开始进行流程配置前，我们需要先定义一个${IMAGE_NAME}变量。  然后新建一个制品库，就是存放 docker 镜像的地方  点击仓库管理，配置访问令牌   然后复制仓库中的登录和推送命令配置到我们构造计划文件中，我们这里选择使用令牌的方式进行登录，点击这个按钮，复制生成的令牌。替换刚才的登录命令
  由于登录密码是敏感的，我们按照第一次创建环境变量的方式再次新增一个变量 ${DOCKER_TOKEN} 替换登录密码
  上面我们注意有个 credentialsId，这个是 coding 能登录我们服务器的关键。这个东西会在 condig 读取秘钥，然后使用秘钥登录我们的服务器进行操作。
   配置好服务器ssh，确保能连接上去。 生成密钥  ssh-keygen -m PEM -t rsa -b 4096 cd .ssh cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys chmod 600 authorized_keys chmod 700 ~/.</description>
			<content type="html"><![CDATA[<h2 id="创建基础项目">创建基础项目</h2>
<ol>
<li>首先我们在右上角创建一个项目。</li>
</ol>
<p><img src="/img/blog/SCR-20220831-x0m.png" alt="1"></p>
<ol start="2">
<li>然后选全功能 DevOps 项目，创建好项目。</li>
</ol>
<p><img src="/img/blog/SCR-20220831-x44.png" alt="2"></p>
<h4 id="进入项目后点击右上角创建一个代码仓库">进入项目后点击右上角，创建一个代码仓库</h4>
<p><img src="/img/blog/SCR-20220831-x5z.png" alt="3"></p>
<ol start="3">
<li>安装 Hyperf, 或者直接去github拉取hyperf项目，此处不做示范</li>
</ol>
<h2 id="编写构建计划">编写构建计划</h2>
<p>首先检出分支，然后会根据分支下的 Dockerfile 生成镜像，然后推送镜像到 coding 的制品仓库。最后登录服务器拉取镜像进行部署。</p>
<h3 id="创建构建计划">创建构建计划</h3>
<ol>
<li>首先我们先创建一个构建计划</li>
</ol>
<p><img src="/img/blog/SCR-20220831-xbg.png" alt="4"></p>
<ol start="2">
<li>然后点击右上角，选择构造计划模板，我们这里选择自定义模板，按照文章最下面配置即可</li>
</ol>
<p><img src="/img/blog/SCR-20220901-13.png" alt="5"></p>
<ol start="3">
<li>选择文本编辑器开始进行流程配置前，我们需要先定义一个${IMAGE_NAME}变量。</li>
</ol>
<p><img src="/img/blog/SCR-20220901-6y.png" alt="6"></p>
<ol start="4">
<li>然后新建一个制品库，就是存放 docker 镜像的地方</li>
</ol>
<p><img src="/img/blog/SCR-20220901-87.png" alt="7"></p>
<ol start="5">
<li>点击仓库管理，配置访问令牌</li>
</ol>
<p><img src="/img/blog/SCR-20220901-9t.png" alt="8"></p>
<ol start="6">
<li>
<p>然后复制仓库中的登录和推送命令配置到我们构造计划文件中，我们这里选择使用令牌的方式进行登录，点击这个按钮，复制生成的令牌。替换刚才的登录命令</p>
</li>
<li>
<p>由于登录密码是敏感的，我们按照第一次创建环境变量的方式再次新增一个变量 ${DOCKER_TOKEN} 替换登录密码</p>
</li>
<li>
<p>上面我们注意有个 credentialsId，这个是 coding 能登录我们服务器的关键。这个东西会在 condig 读取秘钥，然后使用秘钥登录我们的服务器进行操作。</p>
</li>
</ol>
<ul>
<li>配置好服务器ssh，确保能连接上去。</li>
<li>生成密钥</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"> ssh-keygen -m PEM -t rsa -b <span class="m">4096</span>
 <span class="nb">cd</span> .ssh
 cat id_rsa.pub &gt;&gt; authorized_keys
 chmod <span class="m">600</span> authorized_keys
 chmod <span class="m">700</span> ~/.ssh
 vim /etc/ssh/sshd_config
 <span class="c1">##修改配置</span>
 RSAAuthentication yes
 PubkeyAuthentication yes
 PermitRootLogin yes
 PasswordAuthentication no
 <span class="c1">##重启</span>
 service sshd restart
</code></pre></div><ul>
<li>点击左下角的项目设置，开发者选项-凭据管理，录入凭据，就是你服务器IP，ssh私钥</li>
</ul>
<p><img src="/img/blog/SCR-20220901-oa.png" alt="9"></p>
<ol start="9">
<li>最后我们还需要配置触发规则，也就是什么情况执行部署。比如推送到 master，或者推送新标签后触发。</li>
</ol>
<p><img src="/img/blog/SCR-20220901-114.png" alt="10"></p>
<ol start="10">
<li>由于自动部署需要访问我们的 docker 镜像仓库。所以我们需要把执行构建的服务器 IP 添加到 docker 镜像仓库的白名单里面。</li>
</ol>
<p><img src="/img/blog/SCR-20220901-130.png" alt="11"></p>
<ul>
<li>点击右上角头像，个人账号设置，访问令牌, 编辑访问令牌，把ip添加进去（由于隐私问题，就不截图了）</li>
</ul>
<p><img src="/img/blog/SCR-20220901-15o.png" alt="12"></p>
<h2 id="自动部署">自动部署</h2>
<p>把下面的配置好，复制到流程配置里的文本编辑器，配置好环境变量即可</p>
<ul>
<li>注意配置IMAGE_NAME、DOCKER_TOKEN、CID</li>
</ul>
<p><img src="/img/blog/SCR-20220901-18p.png" alt="13"></p>
<h3 id="完整版-jenkinsfile">完整版 Jenkinsfile</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">pipeline <span class="o">{</span>
  agent any
  stages <span class="o">{</span>
    stage<span class="o">(</span><span class="s1">&#39;检出&#39;</span><span class="o">)</span> <span class="o">{</span>
      steps <span class="o">{</span>
        checkout<span class="o">([</span>
          <span class="nv">$class</span>: <span class="s1">&#39;GitSCM&#39;</span>,
          branches: <span class="o">[[</span>name: GIT_BUILD_REF<span class="o">]]</span>,
          userRemoteConfigs: <span class="o">[[</span>
            url: GIT_REPO_URL,
            credentialsId: CREDENTIALS_ID
          <span class="o">]]])</span>
        <span class="o">}</span>
      <span class="o">}</span>
      stage<span class="o">(</span><span class="s1">&#39;生成镜像&#39;</span><span class="o">)</span> <span class="o">{</span>
        steps <span class="o">{</span>
          <span class="nb">echo</span> <span class="s1">&#39;生成镜像中……&#39;</span>
          sh <span class="s1">&#39;ls&#39;</span>
          sh <span class="s1">&#39;docker build -t ${IMAGE_NAME} -f Dockerfile ./&#39;</span>
          <span class="nb">echo</span> <span class="s1">&#39;生成镜像完成&#39;</span>
        <span class="o">}</span>
      <span class="o">}</span>
      stage<span class="o">(</span><span class="s1">&#39;推送镜像&#39;</span><span class="o">)</span> <span class="o">{</span>
        steps <span class="o">{</span>
          <span class="nb">echo</span> <span class="s1">&#39;推送镜像中...&#39;</span>
          sh <span class="s1">&#39;docker login -u hyperf-xxxx -p ${DOCKER_TOKEN} xxxx.pkg.coding.net&#39;</span>  <span class="c1">## 你的访问令牌的登录命令，对照制品仓库的操作指引</span>
          sh <span class="s1">&#39;docker tag ${IMAGE_NAME} xxxx-docker.pkg.coding.net/hyperf/hyperf/${IMAGE_NAME}&#39;</span>  <span class="c1">## 本地镜像打标签</span>
          sh <span class="s1">&#39;docker push xxxx-docker.pkg.coding.net/hyperf/hyperf/${IMAGE_NAME}&#39;</span>  <span class="c1">## 命令进行推送</span>
          <span class="nb">echo</span> <span class="s1">&#39;推送完成&#39;</span>
        <span class="o">}</span>
      <span class="o">}</span>
      stage<span class="o">(</span><span class="s1">&#39;部署&#39;</span><span class="o">)</span> <span class="o">{</span>
        steps <span class="o">{</span>
          <span class="nb">echo</span> <span class="s1">&#39;部署中...&#39;</span>
          script <span class="o">{</span>
            def <span class="nv">remote</span> <span class="o">=</span> <span class="o">[</span>:<span class="o">]</span>
            remote.name <span class="o">=</span> <span class="s1">&#39;my-server&#39;</span>
            remote.allowAnyHosts <span class="o">=</span> <span class="nb">true</span>
            // 主机地址
            remote.host <span class="o">=</span> <span class="s1">&#39;1.1.1.1&#39;</span> <span class="c1">## 你的服务器ip</span>
            remote.port <span class="o">=</span> <span class="m">22</span>
            // 用户名
            remote.user <span class="o">=</span> <span class="s1">&#39;root&#39;</span>
            // credentialsId: coding登录主机的秘钥
            withCredentials<span class="o">([</span>sshUserPrivateKey<span class="o">(</span>credentialsId: <span class="s2">&#34;</span><span class="si">${</span><span class="nv">CID</span><span class="si">}</span><span class="s2">&#34;</span>, keyFileVariable: <span class="s1">&#39;id_rsa&#39;</span><span class="o">)])</span> <span class="o">{</span>
              remote.identityFile <span class="o">=</span> id_rsa

              <span class="c1">## 下面的dokcer指令跟你的自己仓库命令配置</span>

              // 登录并拉取镜像
              sshCommand remote: remote, command: <span class="s2">&#34;docker login -u hyperf-xxxx -p </span><span class="si">${</span><span class="nv">DOCKER_TOKEN</span><span class="si">}</span><span class="s2"> xxxx-docker.pkg.coding.net&#34;</span>
              sshCommand remote: remote, command: <span class="s2">&#34;docker pull xxxx-docker.pkg.coding.net/hyperfhyperf/hyperf/</span><span class="si">${</span><span class="nv">IMAGE_NAME</span><span class="si">}</span><span class="s2">:latest&#34;</span>

              // 停止旧的服务，注意加 <span class="o">||</span>true，不然第一次部署会报错
              sshCommand remote: remote, command: <span class="s2">&#34;docker stop </span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span><span class="s2"> || true&#34;</span>
              sshCommand remote: remote, command: <span class="s2">&#34;docker rm </span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span><span class="s2"> || true&#34;</span>

              // 启动新服务
              sshCommand remote: remote, command: <span class="s2">&#34;docker run -d --restart always -p 9501:9501 -v /www/go_pocket_api.env:/opt/www/.env --name </span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span><span class="s2"> -d xxxx-docker.pkg.coding.net/hyperf/hyperf/</span><span class="si">${</span><span class="nv">IMAGE_NAME</span><span class="si">}</span><span class="s2">:latest&#34;</span>

              // 再启动一个容器，防止服务中断
              sshCommand remote: remote, command: <span class="s2">&#34;docker stop </span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span><span class="s2">2 || true&#34;</span>
              sshCommand remote: remote, command: <span class="s2">&#34;docker rm </span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span><span class="s2">2 || true&#34;</span>
              sshCommand remote: remote, command: <span class="s2">&#34;docker run -d --restart always -p 9502:9501 -v /www/hyperf.env:/opt/www/.env --name </span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span><span class="s2">2 -d xxxx-docker.pkg.coding.net/hyperf/hyperf/</span><span class="si">${</span><span class="nv">IMAGE_NAME</span><span class="si">}</span><span class="s2">:latest&#34;</span>
            <span class="o">}</span>
          <span class="o">}</span>
          <span class="nb">echo</span> <span class="s1">&#39;部署完成&#39;</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>

</code></pre></div><h3 id="然后我们本地修改代码推送到-master-或者推送标签根据自己设置的触发规则来即可">然后我们本地修改代码，推送到 master 或者推送标签根据自己设置的触发规则来即可</h3>
<p><img src="/img/blog/SCR-20220901-1bq.png" alt="14"></p>
<h2 id="总结">总结</h2>
<p>到此为止就会自动部署到你的服务器上，就可以使用了。有什么不懂得可以联系作者本人。</p>
]]></content>
		</item>
		
		<item>
			<title>使用 GitHub Actions 实现博客自动化部署</title>
			<link>http://52yaya.cn/posts/deploy/</link>
			<pubDate>Wed, 24 Aug 2022 22:21:41 +0800</pubDate>
			
			<guid>http://52yaya.cn/posts/deploy/</guid>
			<description>使用 GitHub Actions 自动化 实现代码提交的自动化工作流，要依靠持续集成（或者加上持续交付）服务。现在使用 GitHub Actions 是 GitHub 自家的持续集成及自动化工作流服务。
建立 SSH 密钥 自行百度，略过
将自动化配置写到 GitHub 仓库 打开你的网站代码仓库，点击 Settings 标签，找到 Secrets 设定： 选择 Add a new secret，添加一个配置项DEPLOY_KEY，将刚才复制的私钥的内容粘贴在其中。然后，你可以像我上图中一样，把你的服务器 host 、port 和用户名也添加到配置中。这里用户名应该与你上一步操作使用的登录用户一致。
添加在这里的配置，将只对你可见，不用担心会泄露给他人。
编写工作流文件 好，准备工作都做好了，现在我们来写自动化工作流的配置。
在仓库根目录中创建.github/workflows文件夹，再创建一个 YAML 文件，文件名自定，我这里起名叫deploy.yml，所以文件的完整路径应该为.github/workflows/deploy.yml，我将配置的意义写在注释中，文件内容如下：
name: Deploy site files on: push: branches: - master paths-ignore: - README.md - LICENSE jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Deploy to Server uses: AEnterprise/rsync-deploy@v1.0 env: DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} ARGS: -avz --delete --exclude=&amp;#39;*.</description>
			<content type="html"><![CDATA[<h2 id="使用-github-actions-自动化">使用 GitHub Actions 自动化</h2>
<p>实现代码提交的自动化工作流，要依靠持续集成（或者加上持续交付）服务。现在使用 GitHub Actions 是 GitHub 自家的持续集成及自动化工作流服务。</p>
<h3 id="建立-ssh-密钥">建立 SSH 密钥</h3>
<p>自行百度，略过</p>
<h3 id="将自动化配置写到-github-仓库">将自动化配置写到 GitHub 仓库</h3>
<p>打开你的网站代码仓库，点击 Settings 标签，找到 Secrets 设定：
选择 Add a new secret，添加一个配置项DEPLOY_KEY，将刚才复制的私钥的内容粘贴在其中。然后，你可以像我上图中一样，把你的服务器 host 、port 和用户名也添加到配置中。这里用户名应该与你上一步操作使用的登录用户一致。</p>
<p><img src="/img/blog/Secrets.png" alt="1"></p>
<p>添加在这里的配置，将只对你可见，不用担心会泄露给他人。</p>
<h3 id="编写工作流文件">编写工作流文件</h3>
<p>好，准备工作都做好了，现在我们来写自动化工作流的配置。</p>
<p>在仓库根目录中创建.github/workflows文件夹，再创建一个 YAML 文件，文件名自定，我这里起名叫deploy.yml，所以文件的完整路径应该为.github/workflows/deploy.yml，我将配置的意义写在注释中，文件内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">name: Deploy site files

on:
  push:
    branches:
      - master
    paths-ignore:
      - README.md
      - LICENSE

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to Server
        uses: AEnterprise/rsync-deploy@v1.0
        env:
          DEPLOY_KEY: <span class="si">${</span><span class="p">{ secrets.DEPLOY_KEY </span><span class="si">}</span><span class="o">}</span>
          ARGS: -avz --delete --exclude<span class="o">=</span><span class="s1">&#39;*.pyc&#39;</span>
          SERVER_PORT: <span class="si">${</span><span class="p">{ secrets.SERVER_PORT </span><span class="si">}</span><span class="o">}</span>
          FOLDER: ./
          SERVER_IP: <span class="si">${</span><span class="p">{ secrets.SSH_HOST </span><span class="si">}</span><span class="o">}</span>
          USERNAME: <span class="si">${</span><span class="p">{ secrets.SSH_USERNAME </span><span class="si">}</span><span class="o">}</span>
          SERVER_DESTINATION: /home
      - name: Restart server
        uses: appleboy/ssh-action@master
        with:
          host: <span class="si">${</span><span class="p">{ secrets.SSH_HOST </span><span class="si">}</span><span class="o">}</span>
          username: <span class="si">${</span><span class="p">{ secrets.SSH_USERNAME </span><span class="si">}</span><span class="o">}</span>
          key: <span class="si">${</span><span class="p">{ secrets.DEPLOY_KEY </span><span class="si">}</span><span class="o">}</span>
          <span class="c1"># </span>
          script: <span class="p">|</span>
            <span class="nb">cd</span> /home
            hugo -D
</code></pre></div><p>把文件写好，提交到仓库，就可以发现 GitHub Actions 已经启动了！可以在提交历史后面的状态，或者 Actions 标签中看到运行的状态。</p>
<p><img src="/img/blog/actions.png" alt="2"></p>
<h2 id="总结">总结</h2>
<p>到此为止就会自动部署到你的服务器上，就可以使用了。有什么不懂得可以联系作者本人。</p>
]]></content>
		</item>
		
		<item>
			<title>搭建hugo博客记录</title>
			<link>http://52yaya.cn/posts/blog/</link>
			<pubDate>Wed, 24 Aug 2022 01:22:44 +0800</pubDate>
			
			<guid>http://52yaya.cn/posts/blog/</guid>
			<description>Hugo简介 Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
Hugo使用 安装Hugo 由于我用的是mac系统，直接使用brew，其他系统参考Hugo中文文档
brew install hugo 检查是否安装成功
hugo version 然后输出
hugo v0.92.0+extended darwin/arm64 BuildDate=unknown 就说明安装成功了
创建blog站点 在当前目录执行命令创建blog站点
hugo new site blog 这个blog就是项目的名字了，创建的目录如下
├── archetypes │ └── default.md ├── config.toml # 博客站点的配置文件 ├── content # 博客文章所在目录 ├── data ├── layouts # 网站布局 ├── static # 一些静态内容 └── themes # 博客主题 我们的博客文章就放在content目录下的posts中，只需要按照Markdown格式编写，hugo就会读取到文章然后展示在博客中。
安装主题 我这里用的是hermit主题，开发者是Track3
安装依次执行以下命令：
cd myblog git clone https://github.com/Track3/hermit.git ./themes/hermit 使用主题 将hermit主题中exampleSite目录下的内容拷贝到当前目录blog下
可以通过修改config.toml文件来更改配置
贴上我的config.toml文件配置，是抄了煎鱼佬(#^.^#)
baseURL = &amp;#34;http://52yaya.cn&amp;#34; languageCode = &amp;#34;zh-hans&amp;#34; defaultContentLanguage = &amp;#34;en&amp;#34; title = &amp;#34;很高兴与你相遇！&amp;#34; theme = [&amp;#34;hermit&amp;#34;] # enableGitInfo = true pygmentsCodefences = true pygmentsUseClasses = true # hasCJKLanguage = true # If Chinese/Japanese/Korean is your main content language, enable this to make wordCount works right.</description>
			<content type="html"><![CDATA[<h2 id="hugo简介">Hugo简介</h2>
<p><code>Hugo</code>是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。</p>
<h2 id="hugo使用">Hugo使用</h2>
<h3 id="安装hugo">安装Hugo</h3>
<p>由于我用的是<code>mac</code>系统，直接使用<code>brew</code>，其他系统参考<a href="https://www.gohugo.org/">Hugo中文文档</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">brew install hugo
</code></pre></div><p>检查是否安装成功</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">hugo version
</code></pre></div><p>然后输出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">hugo v0.92.0+extended darwin/arm64 <span class="nv">BuildDate</span><span class="o">=</span>unknown
</code></pre></div><p>就说明安装成功了</p>
<h3 id="创建blog站点">创建blog站点</h3>
<p>在当前目录执行命令创建blog站点</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">hugo new site blog
</code></pre></div><p>这个<code>blog</code>就是项目的名字了，创建的目录如下</p>
<pre tabindex="0"><code>├── archetypes
│   └── default.md
├── config.toml         # 博客站点的配置文件
├── content             # 博客文章所在目录
├── data                
├── layouts             # 网站布局
├── static              # 一些静态内容
└── themes              # 博客主题
</code></pre><p>我们的博客文章就放在<code>content</code>目录下的<code>posts</code>中，只需要按照Markdown格式编写，hugo就会读取到文章然后展示在博客中。</p>
<h3 id="安装主题">安装主题</h3>
<p>我这里用的是<code>hermit</code>主题，开发者是<a href="https://ojbk.im/">Track3</a></p>
<p>安装依次执行以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> myblog 
git clone https://github.com/Track3/hermit.git ./themes/hermit
</code></pre></div><h3 id="使用主题">使用主题</h3>
<p>将<code>hermit</code>主题中<code>exampleSite</code>目录下的内容拷贝到当前目录<code>blog</code>下</p>
<p>可以通过修改<code>config.toml</code>文件来更改配置</p>
<p>贴上我的<code>config.toml</code>文件配置，是抄了煎鱼佬(#^.^#)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="nx">baseURL</span> <span class="p">=</span> <span class="s2">&#34;http://52yaya.cn&#34;</span>
<span class="nx">languageCode</span> <span class="p">=</span> <span class="s2">&#34;zh-hans&#34;</span>
<span class="nx">defaultContentLanguage</span> <span class="p">=</span> <span class="s2">&#34;en&#34;</span>
<span class="nx">title</span> <span class="p">=</span> <span class="s2">&#34;很高兴与你相遇！&#34;</span>
<span class="nx">theme</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;hermit&#34;</span><span class="p">]</span>
<span class="c"># enableGitInfo = true</span>
<span class="nx">pygmentsCodefences</span>  <span class="p">=</span> <span class="kc">true</span>
<span class="nx">pygmentsUseClasses</span>  <span class="p">=</span> <span class="kc">true</span>
<span class="c"># hasCJKLanguage = true  # If Chinese/Japanese/Korean is your main content language, enable this to make wordCount works right.</span>
<span class="nx">rssLimit</span> <span class="p">=</span> <span class="mi">10</span>  <span class="c"># Maximum number of items in the RSS feed.</span>
<span class="nx">copyright</span> <span class="p">=</span> <span class="s2">&#34;This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.&#34;</span> <span class="c"># This message is only used by the RSS template.</span>
<span class="nx">enableEmoji</span> <span class="p">=</span> <span class="kc">true</span>  <span class="c"># Shorthand emojis in content files - https://gohugo.io/functions/emojify/</span>
<span class="nx">googleAnalytics</span> <span class="p">=</span> <span class="s2">&#34;UA-166045776-1&#34;</span>
<span class="c"># disqusShortname = &#34;yourdiscussshortname&#34;</span>
<span class="nx">buildFuture</span> <span class="p">=</span> <span class="kc">true</span>

<span class="p">[</span><span class="nx">author</span><span class="p">]</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;Errorist&#34;</span>

<span class="p">[</span><span class="nx">blackfriday</span><span class="p">]</span>
<span class="nx">extensionsmask</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;noIntraEmphasis&#34;</span><span class="p">]</span>
<span class="nx">fractions</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="c"># hrefTargetBlank = true</span>
  <span class="c"># noreferrerLinks = true</span>
  <span class="c"># nofollowLinks = true</span>

<span class="p">[</span><span class="nx">markup</span><span class="p">.</span><span class="nx">goldmark</span><span class="p">.</span><span class="nx">renderer</span><span class="p">]</span>
<span class="nx">unsafe</span> <span class="p">=</span> <span class="kc">true</span>

<span class="p">[</span><span class="nx">taxonomies</span><span class="p">]</span>
  <span class="nx">tag</span> <span class="p">=</span> <span class="s2">&#34;tags&#34;</span>
  <span class="c"># Categories are disabled by default.</span>

<span class="p">[</span><span class="nx">params</span><span class="p">]</span>
  <span class="nx">since</span> <span class="p">=</span> <span class="s2">&#34;2018&#34;</span>
  <span class="nx">toc</span> <span class="p">=</span> <span class="kc">true</span>
 <span class="nx">usemermaid</span><span class="p">=</span><span class="kc">true</span>

 <span class="nx">customCSS</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;css/a.css&#34;</span><span class="p">]</span>
  
  <span class="nx">dateform</span>        <span class="p">=</span> <span class="s2">&#34;Jan 2, 2006&#34;</span>
  <span class="nx">dateformShort</span>   <span class="p">=</span> <span class="s2">&#34;Jan 2&#34;</span>
  <span class="nx">dateformNum</span>     <span class="p">=</span> <span class="s2">&#34;2006-01-02&#34;</span>
  <span class="nx">dateformNumTime</span> <span class="p">=</span> <span class="s2">&#34;2006-01-02 15:04 -0700&#34;</span>

  <span class="c"># Metadata mostly used in document&#39;s head</span>
  <span class="c"># description = &#34;&#34;</span>
  <span class="c"># images = [&#34;&#34;]</span>

  <span class="nx">homeSubtitle</span> <span class="p">=</span> <span class="s2">&#34;Coding, Thinking, Life&#34;</span>
  <span class="nx">footerCopyright</span> <span class="p">=</span> <span class="s1">&#39; &amp;#183; &lt;a href=&#34;http://beian.miit.gov.cn/&#34;&gt;浙ICP备2020045357号&lt;/a&gt;&#39;</span>
  <span class="c"># bgImg = &#34;&#34;  # Homepage background-image URL</span>

  <span class="c"># Prefix of link to the git commit detail page. GitInfo must be enabled.</span>
  <span class="c"># gitUrl = &#34;https://github.com/username/repository/commit/&#34;</span>

  <span class="c"># Toggling this option needs to rebuild SCSS, requires Hugo extended version</span>
  <span class="nx">justifyContent</span> <span class="p">=</span> <span class="kc">false</span>  <span class="c"># Set &#34;text-align: justify&#34; to `.content`.</span>

  <span class="nx">relatedPosts</span> <span class="p">=</span> <span class="kc">false</span>  <span class="c"># Add a related content section to all single posts page</span>

  <span class="nx">code_copy_button</span> <span class="p">=</span> <span class="kc">true</span> <span class="c"># Turn on/off the code-copy-button for code-fields</span>
  
  <span class="c"># Add custom css</span>
  <span class="c"># customCSS = [&#34;css/foo.css&#34;, &#34;css/bar.css&#34;]</span>

  <span class="c"># Social Icons</span>
  <span class="c"># Check https://github.com/Track3/hermit#social-icons for more info.</span>


  <span class="p">[[</span><span class="nx">params</span><span class="p">.</span><span class="nx">social</span><span class="p">]]</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;github&#34;</span>
    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;https://github.com/ErroristZ&#34;</span>

	
  <span class="p">[[</span><span class="nx">params</span><span class="p">.</span><span class="nx">social</span><span class="p">]]</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;email&#34;</span>
    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;mailto:zhangkangweiruan@gmail.com&#34;</span>

<span class="p">[</span><span class="nx">params</span><span class="p">.</span><span class="nx">utteranc</span><span class="p">]</span>
  <span class="nx">enable</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">repo</span> <span class="p">=</span> <span class="s2">&#34;ErroristZ/blog&#34;</span> 
  <span class="nx">issueTerm</span> <span class="p">=</span> <span class="s2">&#34;pathname&#34;</span>
  <span class="nx">theme</span> <span class="p">=</span> <span class="s2">&#34;github-light&#34;</span>

<span class="p">[</span><span class="nx">menu</span><span class="p">]</span>

  <span class="p">[[</span><span class="nx">menu</span><span class="p">.</span><span class="nx">main</span><span class="p">]]</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;文章&#34;</span>
    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;posts/&#34;</span>
    <span class="nx">weight</span> <span class="p">=</span> <span class="mi">10</span>
	
  <span class="p">[[</span><span class="nx">menu</span><span class="p">.</span><span class="nx">main</span><span class="p">]]</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;标签&#34;</span>
    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;tags/&#34;</span>
    <span class="nx">weight</span> <span class="p">=</span> <span class="mi">10</span>

  <span class="p">[[</span><span class="nx">menu</span><span class="p">.</span><span class="nx">main</span><span class="p">]]</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;关于&#34;</span>
    <span class="nx">url</span> <span class="p">=</span> <span class="s2">&#34;about/&#34;</span>
    <span class="nx">weight</span> <span class="p">=</span> <span class="mi">20</span>

</code></pre></div><p>设置好配置文件后在<code>blog</code>目录下执行<code>hugo</code>命令即可生成<code>public</code>文件夹，这个文件夹就是我们站点的根目录文件夹，后面nginx中部署时指定的根目录也是这个。如果想使用<code>github pages</code>只要将这个目录放在<code>github</code>托管，每次改完提交即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">hugo
</code></pre></div><h2 id="使用nginx部署">使用Nginx部署</h2>
<h3 id="安装nginx">安装Nginx</h3>
<p>使用docker安装nginx，步骤略过。</p>
<h3 id="配置nginx">配置Nginx</h3>
<p>修改配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /etc/nginx/conf.d
vi web.conf
</code></pre></div><p>配置nginx。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">  server <span class="o">{</span>
      listen       80<span class="p">;</span>
      server_name  52yaya.cn<span class="p">;</span>

      root /home/public<span class="p">;</span>

      location / <span class="o">{</span>
          try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ /index.html<span class="p">;</span>
      <span class="o">}</span>

      error_page   <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span>  /50x.html<span class="p">;</span>
      <span class="nv">location</span> <span class="o">=</span> /50x.html <span class="o">{</span>
          root   /usr/share/nginx/html<span class="p">;</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div><p>按下Esc键，并输入<code>:wq</code>保存退出文件。</p>
<h3 id="启动nginx">启动Nginx</h3>
<p>运行docker以下命令重启Nginx服务。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">docker nginx restart
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title></title>
			<link>http://52yaya.cn/posts/injectipa-userszhangkangdesktopqq_8/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>http://52yaya.cn/posts/injectipa-userszhangkangdesktopqq_8/</guid>
			<description>injectipa /Users/zhangkang/Desktop/QQ_8.9.13_dump.ipa /Users/zhangkang/Desktop/QQPure.dylib
tar &amp;ndash;lzma -xvpf /Users/zhangkang/Desktop/data.tar.lzma</description>
			<content type="html"><![CDATA[<p>injectipa /Users/zhangkang/Desktop/QQ_8.9.13_dump.ipa /Users/zhangkang/Desktop/QQPure.dylib</p>
<p>tar &ndash;lzma -xvpf /Users/zhangkang/Desktop/data.tar.lzma</p>
]]></content>
		</item>
		
	</channel>
</rss>
